/**
 * MKronoSphere - Core Type Definitions
 * 
 * This module defines the fundamental data structures and interfaces
 * that power the temporal orchestration system. These types ensure
 * type safety across all modules and provide clear contracts for
 * data flow throughout the system.
 */

import { EventEmitter } from 'events';

/**
 * Represents the different categories of temporal events that can be tracked
 * and synchronized across the Sovereign Network.
 */
export type EventType = 'human' | 'cosmic' | 'financial' | 'energetic' | 'system';

/**
 * Defines the structure of a temporal event that can be logged, tracked,
 * and synchronized across different systems and timelines.
 */
export interface TemporalEvent {
  /** Unique identifier for the event */
  id: string;
  /** Precise timestamp when the event occurred */
  timestamp: Date;
  /** Category of the event (human, cosmic, financial, energetic, system) */
  type: EventType;
  /** Array of tags for categorization and filtering */
  tags: string[];
  /** Additional metadata specific to the event type */
  metadata: Record<string, any>;
  /** Optional description of the event */
  description?: string;
  /** Source system that generated this event */
  source?: string;
  /** Priority level for synchronization (1-10, 10 being highest) */
  priority?: number;
}

/**
 * Represents a target system that can be synchronized with temporal events.
 * This enables the temporalResonator to coordinate multiple systems
 * based on time-based triggers and conditions.
 */
export interface SyncTarget {
  /** Unique identifier for the sync target */
  id: string;
  /** Type of target (repository, agent, system, or custom) */
  type: 'repo' | 'agent' | 'system' | 'custom';
  /** Configuration specific to this sync target */
  config: Record<string, any>;
  /** Connection details for the target */
  connection?: {
    url?: string;
    token?: string;
    method?: 'http' | 'websocket' | 'file' | 'custom';
  };
  /** Schedule for when this target should be synchronized */
  schedule?: {
    cron?: string;
    timezone?: string;
    conditions?: string[];
  };
  /** Whether this target is currently active */
  active: boolean;
  /** Last synchronization timestamp */
  lastSync?: Date;
}

/**
 * Represents a signal that is broadcast when temporal events trigger
 * synchronization across the network. This is the core mechanism
 * for coordinating multiple systems based on time-based events.
 */
export interface PulseSignal {
  /** The temporal event that triggered this pulse */
  event: TemporalEvent;
  /** Array of targets that should receive this pulse */
  targets: SyncTarget[];
  /** Timestamp when the pulse was generated */
  timestamp: Date;
  /** Unique identifier for this pulse */
  pulseId: string;
  /** Status of the pulse (pending, sent, delivered, failed) */
  status: 'pending' | 'sent' | 'delivered' | 'failed';
  /** Optional error information if the pulse failed */
  error?: string;
}

/**
 * Configuration for Sacred Time Zones - predefined temporal markers
 * that have special significance in the Sovereign Network.
 */
export interface SacredTimeZone {
  /** Unique identifier for this sacred time zone */
  id: string;
  /** Human-readable name */
  name: string;
  /** Type of sacred time (astronomical, personal, ritual) */
  type: 'full-moon' | 'equinox' | 'solstice' | 'sunrise' | 'sunset' | 'custom';
  /** Geographic location for location-based calculations */
  location?: {
    latitude: number;
    longitude: number;
    timezone: string;
  };
  /** Custom calculation function or configuration */
  calculation?: {
    method: 'astronomical' | 'custom' | 'cron';
    config: Record<string, any>;
  };
  /** Tags to apply to events generated by this sacred time zone */
  tags: string[];
  /** Priority level for this sacred time zone */
  priority: number;
  /** Whether this sacred time zone is currently active */
  active: boolean;
}

/**
 * Main configuration interface for the MKronoSphere system.
 * This defines all the settings and options that control
 * the behavior of the temporal orchestration framework.
 */
export interface MKronoSphereConfig {
  /** Application name and version */
  app: {
    name: string;
    version: string;
    environment: 'development' | 'production' | 'test';
  };
  /** Logging configuration */
  logging: {
    level: 'debug' | 'info' | 'warn' | 'error';
    format: 'json' | 'text' | 'colored';
    output: 'console' | 'file' | 'both';
    filePath?: string;
  };
  /** Sacred Time Zones configuration */
  sacredTimeZones: SacredTimeZone[];
  /** Default sync targets */
  defaultTargets: SyncTarget[];
  /** Real-time console configuration */
  console: {
    enabled: boolean;
    refreshInterval: number;
    showTimeline: boolean;
    showEvents: boolean;
    showTargets: boolean;
  };
  /** WebSocket server configuration for real-time updates */
  websocket?: {
    enabled: boolean;
    port: number;
    path: string;
  };
}

/**
 * Event emitter interface for temporal events.
 * This enables the pub/sub pattern for coordinating
 * different modules within the MKronoSphere system.
 */
export interface TemporalEventEmitter extends EventEmitter {
  /** Emit a temporal event */
  emit(event: 'temporal-event', data: TemporalEvent): boolean;
  /** Emit a pulse signal */
  emit(event: 'pulse-signal', data: PulseSignal): boolean;
  /** Emit a sync target update */
  emit(event: 'sync-target-update', data: SyncTarget): boolean;
  /** Emit a sacred time zone trigger */
  emit(event: 'sacred-time-trigger', data: SacredTimeZone): boolean;
  
  /** Listen for temporal events */
  on(event: 'temporal-event', listener: (data: TemporalEvent) => void): this;
  /** Listen for pulse signals */
  on(event: 'pulse-signal', listener: (data: PulseSignal) => void): this;
  /** Listen for sync target updates */
  on(event: 'sync-target-update', listener: (data: SyncTarget) => void): this;
  /** Listen for sacred time zone triggers */
  on(event: 'sacred-time-trigger', listener: (data: SacredTimeZone) => void): this;
}

/**
 * Result of a synchronization operation.
 * This provides feedback about the success or failure
 * of synchronizing with a specific target.
 */
export interface SyncResult {
  /** Target that was synchronized */
  target: SyncTarget;
  /** Whether the synchronization was successful */
  success: boolean;
  /** Timestamp of the synchronization attempt */
  timestamp: Date;
  /** Duration of the synchronization in milliseconds */
  duration: number;
  /** Optional error message if synchronization failed */
  error?: string;
  /** Additional metadata about the synchronization */
  metadata?: Record<string, any>;
} 